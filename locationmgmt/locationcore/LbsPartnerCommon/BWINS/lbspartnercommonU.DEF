EXPORTS
	??0CLbsCallbackTimer@@IAE@AAVMLbsCallbackTimerObserver@@@Z @ 1 NONAME ; CLbsCallbackTimer::CLbsCallbackTimer(class MLbsCallbackTimerObserver &)
	?AddUpInt64TimersWithOverflowCheck@LbsTimerUtils@@SA?AVTTime@@V2@VTTimeIntervalMicroSeconds@@@Z @ 2 NONAME ; class TTime LbsTimerUtils::AddUpInt64TimersWithOverflowCheck(class TTime, class TTimeIntervalMicroSeconds)
	?Cancel@CLbsCallbackTimer@@QAEXXZ @ 3 NONAME ; void CLbsCallbackTimer::Cancel(void)
	?ConstructL@CLbsCallbackTimer@@IAEXXZ @ 4 NONAME ; void CLbsCallbackTimer::ConstructL(void)
	?EventAfter@CLbsCallbackTimer@@QAEXABVTTimeIntervalMicroSeconds32@@H@Z @ 5 NONAME ; void CLbsCallbackTimer::EventAfter(class TTimeIntervalMicroSeconds32 const &, int)
	?EventAfter@CLbsCallbackTimer@@QAEXABVTTimeIntervalMicroSeconds@@H@Z @ 6 NONAME ; void CLbsCallbackTimer::EventAfter(class TTimeIntervalMicroSeconds const &, int)
	?EventAfter@CLbsCallbackTimer@@QAEXABVTTimeIntervalSeconds@@H@Z @ 7 NONAME ; void CLbsCallbackTimer::EventAfter(class TTimeIntervalSeconds const &, int)
	?EventAtUTC@CLbsCallbackTimer@@QAEXABVTTime@@H@Z @ 8 NONAME ; void CLbsCallbackTimer::EventAtUTC(class TTime const &, int)
	?GetMessageProcessName@LbsDevLogger@@SAXABVRMessage2@@AAV?$TBuf@$0BAA@@@@Z @ 9 NONAME ; void LbsDevLogger::GetMessageProcessName(class RMessage2 const &, class TBuf<256> &)
	?HexDump@LbsDevLogger@@SAXW4TLbsLogPriority@@PBEH@Z @ 10 NONAME ; void LbsDevLogger::HexDump(enum TLbsLogPriority, unsigned char const *, int)
	?IsActive@CLbsCallbackTimer@@QBEHXZ @ 11 NONAME ; int CLbsCallbackTimer::IsActive(void) const
	?NewL@CLbsCallbackTimer@@SAPAV1@AAVMLbsCallbackTimerObserver@@@Z @ 12 NONAME ; class CLbsCallbackTimer * CLbsCallbackTimer::NewL(class MLbsCallbackTimerObserver &)
	?OverWrite@LbsDevLogger@@SAXABVTDesC16@@@Z @ 13 NONAME ; void LbsDevLogger::OverWrite(class TDesC16 const &)
	?OverWrite@LbsDevLogger@@SAXABVTDesC8@@@Z @ 14 NONAME ; void LbsDevLogger::OverWrite(class TDesC8 const &)
	?Write@LbsDevLogger@@SAXW4TLbsLogType@@W4TLbsLogPriority@@V?$TRefByValue@$$CBVTDesC16@@@@ZZ @ 15 NONAME ; void LbsDevLogger::Write(enum TLbsLogType, enum TLbsLogPriority, class TRefByValue<class TDesC16 const >, ...)
	?Write@LbsDevLogger@@SAXW4TLbsLogType@@W4TLbsLogPriority@@V?$TRefByValue@$$CBVTDesC8@@@@ZZ @ 16 NONAME ; void LbsDevLogger::Write(enum TLbsLogType, enum TLbsLogPriority, class TRefByValue<class TDesC8 const >, ...)
	?SubtractInt64TimersWithUnderflowCheck@LbsTimerUtils@@SA?AVTTimeIntervalMicroSeconds@@VTTime@@0@Z @ 17 NONAME ; class TTimeIntervalMicroSeconds LbsTimerUtils::SubtractInt64TimersWithUnderflowCheck(class TTime, class TTime)
	?Cancel@CMemoryUsageLogger@@QAEXXZ @ 18 NONAME ; void CMemoryUsageLogger::Cancel(void)
	?NewLC@CMemoryUsageLogger@@SAPAV1@XZ @ 19 NONAME ; class CMemoryUsageLogger * CMemoryUsageLogger::NewLC(void)

