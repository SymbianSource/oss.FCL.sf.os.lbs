// This ini file defines the sequence of the different subsessions.  Below is a
//  list of the different sequence values and what they mean.  Below that are the
//  actual testexecute sections which define the properties and sequence pattern
//  for the different sub sessions.
// This ini file contains all the test data for the tests which use one PM at a time.

//Each sequence block should have its own unique number which should be appended to each text block.  
// These numbers need to incremental starting from sequence 0. The first sequence (master sequence) 
// is always started at the beginning of the test.  All other sequences are started at specified points:
//
//NumberOfSequences = Y
	//This defines the number of sessions that are run in this test
//
//SequenceX = Y
	//This is the important entry which defines the actual sequence that the test should run for this session.  
	//It defines the messages that should be:
	//	a.	Sent to LBS via the PM
	//	b.	Received from LBS via the NG
	//	c.	Received from LBS via the Location Acquisition API
	//	d.	Received from LBS via the Transmit to Third Party (X3P) API
	//As shown in the example, it should be a space separated list.  Below this description there is a complete
	// list of all the different possible values.
//
//SessionIdX = Y
	//Defines the session ID of the sequence
//
//PMX = Y
	//Defines the Protocol Module index value that this session should use.  This index value should map the to 
	// protocol module index discussed in section 4.2.
//
//TypeX = Y
	//Defines the type of the session, which should currently be either: MTLR, MOLR, X3P or NIMTLR.
//
//StartPositionX = Y
	//Defines when this sequence should start.  The first sequence (sequence0), will start at the beginning of the
	// test and so this entry is not required.  Sequence0 is the master sequence and other sequences define their 
	// start position relative to this sequence.  So if the sequence has a start position value of 2, 
	// that sequence will be started when the master sequence has reached the 3rd message in its sequence 
	//(3rd message as the first message is defined as message 0)
//
//EmergencyX = Y
	//Each sequence type can have its own specific ini file entries that are only read in when the sequence is of the correct type.  
	// So, for example, this emergency entry is only read in for MTLR and NIMTLR sequences.

//----------------------------------
// Messages from test code to NG/LBS
//----------------------------------
// ENetMsgProcessPrivacyRequest = 1000
// ENetMsgProcessLocationRequest = 1001
// ENetMsgProcessSessionComplete = 1002
// ENetMsgProcessAssistanceData = 1003
// ENetMsgProcessLocationUpdate = 1004
// ENetMsgGetCurrentCapabilitiesRequest = 1005
// ENetMsgProcessStatusUpdate = 1006

// ENetTestMsgEndSession = 1100		//Contains 1002 | 1006

//----------------------------------
// Messages from NG/LBS to test code
//----------------------------------
// ENetMsgRespondPrivacyRequest = 2000 - Done
// ENetMsgRespondLocationRequest = 2001 - Done
// ENetMsgRequestTransmitLocation = 2002
// ENetMsgCancelTransmitLocation = 2003
// ENetMsgRequestAssistanceData = 2004 - Done
// ENetMsgRequestSelfLocation = 2005
// ENetMsgCancelSelfLocation = 2006
// ENetMsgRequestNetworkLocation = 2007
// ENetMsgCancelNetworkLocation = 2008
// ENetMsgGetCurrentCapabilitiesResponse = 2009 - Done

//---------------------------------
// Messages from Privacy Controller
//---------------------------------
// EProcessNetworkLocationRequest = 3000 - Done
// EProcessNetworkPositionUpdate = 3001 - Done
// EProcessRequestComplete = 3002 - Done

//---------------------------------
// Messages to LBS Self Locate API
//---------------------------------
// ERequestSelfLocation = 4000

//----------------------------------
// Messages from LBS Self Locate API
//----------------------------------
// ENotifyPositionUpdate = 5000
// EGetLastKnownLocation = 5001

//----------------------------------
// Messages to LBS X3P API
//----------------------------------
// ETransmitPosition = 6000

//----------------------------------
// Messages from LBS X3P API
//----------------------------------
// EX3PRefPositionUpdate = 7000
// EX3PPositionUpdate = 7001

//------------------------------------------------------------------------------------------------------------

// Defines the filename of this ini file.  This is used by the test to pass the ini file to sub components
//  to allow the correct sections to carry out the initialisation.  This is used by all tests.
[FileName]
sequence_data_file = c:\testdata\configs\multiple_subsessions_onepm.ini

//----------------------------------
// Test runs a single MTLR over 1 Pm
//----------------------------------
[OneMtlrOnePm]
NumberOfSequences = 1

//Sequence0 = Standard MTLR
Sequence0 = 2009 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1100 3002
SessionId0 = 3
PM0 = 1
Type0 = MTLR
//----------------------------------

//-------------------------------------
// Test runs a single NI MTLR over 1 Pm
//-------------------------------------
[OneNIMtlrOnePm]
NumberOfSequences = 1

//Sequence0 = NI Emergency MTLR
Sequence0 = 2009 1006 1004 1003 1001 2001 1100 3002
SessionId0 = 3
PM0 = 1
Type0 = NIMTLR
Emergency0 = 1
//-------------------------------------

//----------------------------------
// Test runs a single MOLR over 1 Pm
//----------------------------------
[OneMolrOnePm]
NumberOfSequences = 1

//Sequence0 = Standard MOLR
Sequence0 = 2009 4000 2005 1006 1004 5000 4000 1003 1001 5000 2001 1004 1100
Type0 = MOLR
PM0 = 1
SessionId0 = 3
//----------------------------------

//----------------------------------
// Test runs a single X3P over 1 Pm
//----------------------------------
[OneX3POnePm]
NumberOfSequences = 1

//Sequence0 = Standard X3P
Sequence0 = 2009 6000 2002 1006 1004 1003 1001 7000 2001 1004 1100 7001
Type0 = X3P
PM0 = 1
SessionId0 = 3
//----------------------------------

//----------------------------------
// Test runs 2 MTLR's over 1 Pm
//----------------------------------
[TwoMtlrsOnePm]
NumberOfSequences = 2

//Sequence0 = Standard MTLR
Sequence0 = 2009 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1100 3002
SessionId0 = 3
PM0 = 1
Type0 = MTLR

//Sequence1 = Standard MTLR
Sequence1 = 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId1 = 4
PM1 = 1
Type1 = MTLR
StartPosition1 = 2
//----------------------------------

//----------------------------------
// Test runs 4 MTLR's over 1 Pm
//----------------------------------
[FourMtlrsOnePm]
NumberOfSequences = 4

//Sequence0 = Standard MTLR
Sequence0 = 2009 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1100 3002
SessionId0 = 3
PM0 = 1
Type0 = MTLR

//Sequence1 = Standard MTLR
Sequence1 = 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId1 = 4
PM1 = 1
Type1 = MTLR
StartPosition1 = 2

//Sequence2 = Standard MTLR
Sequence2 = 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId2 = 5
PM2 = 1
Type2 = MTLR
StartPosition2 = 4

//Sequence3 = Standard MTLR
Sequence3 = 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId3 = 6
PM3 = 1
Type3 = MTLR
StartPosition3 = 6

//----------------------------------


//----------------------------------------------
// Test runs 2 MTLR's and a MOLR over 1 Pm
//----------------------------------------------
[TwoMtlrsOneMolrOnePm]
NumberOfSequences = 3

//Sequence0 = Standard MTLR
Sequence0 = 2009 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId0 = 2
PM0 = 1
Type0 = MTLR

//Sequence1 = Standard MOLR
Sequence1 = 4000 5000 4000 5000 1100
Type1 = MOLR
PM1 = 1
SessionId1 = 3
StartPosition1 = 2

//Sequence2 = Standard MTLR
Sequence2 = 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId2 = 4
PM2 = 1
Type2 = MTLR
StartPosition2 = 3

//Sequence3 = Standard MTLR
Sequence3 = 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId3 = 5
PM3 = 1
Type3 = MTLR
StartPosition3 = 6
//----------------------------------------------


//-------------------------------------------
// Test runs 2 MTLR's and a NI MTLR over 1 Pm
//-------------------------------------------
// Test runs 2 MTLR's and then starts a NI Emergency MTLR
[TwoMtlrsOneNIMtlrOnePm]
NumberOfSequences = 3

//Sequence0 = Standard MTLR
Sequence0 = 2009 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1002 1006 3002
SessionId0 = 3
PM0 = 1
Type0 = MTLR

//Sequence1 = Standard MTLR
Sequence1 = 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId1 = 4
StartPosition1 = 2
PM1 = 1
Type1 = MTLR

//Sequence2 = NI Emergency MTLR
Sequence2 = 1006 1004 1003 1001 2001 1100 3002
SessionId2 = 5
StartPosition2 = 5
PM2 = 1
Emergency2 = 1
Type2 = NIMTLR
//-------------------------------------------


//----------------------------------------------
// Test runs 2 MTLR's and a X3P over 1 Pm
//----------------------------------------------
[TwoMtlrsOneX3POnePm]
NumberOfSequences = 3

//Sequence0 = Standard X3P
Sequence0 = 2009 6000 2002 1006 1004 1003 1001 7000 2001 1004 1100 7001
SessionId0 = 4
PM0 = 1
Type0 = X3P

//Sequence1 = Standard MTLR
Sequence1 = 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1002 1006 3002
Type1 = MTLR
PM1 = 1
SessionId1 = 3
StartPosition1 = 2

//Sequence2 = Standard MTLR
Sequence2 = 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId2 = 5
PM2 = 1
Type2 = MTLR
StartPosition2 = 3
//----------------------------------------------

//-----------------------------------------------------------
// Test runs 2 MTLR's, 1 MOLR, 1 X3P and 1 NI MTLR over 1 PM
//-----------------------------------------------------------
[TwoMtlrsOneMolrOneX3POneNIMtlrOnePm]
NumberOfSequences = 5

//Sequence0 = Standard X3P
Sequence0 = 2009 6000 2002 1006 1004 1003 1001 7000 2001 1004 1100 7001
SessionId0 = 4
PM0 = 1
Type0 = X3P

//Sequence1 = Standard MTLR
Sequence1 = 1006 1000 3000 2000 1004 1003 1001 2001 1001 2001 1002 1006 3002
Type1 = MTLR
PM1 = 1
SessionId1 = 3
StartPosition1 = 2

//Sequence2 = Standard MOLR
Sequence2 = 4000 5000 4000 5000 1100
Type2 = MOLR
PM2 = 1
SessionId2 = 1
StartPosition2 = 3

//Sequence3 = NI Emergency MTLR
Sequence3 = 1006 1004 1003 1001 2001 1100 3002
SessionId3 = 6
StartPosition3 = 5
PM3 = 1
Emergency3 = 1
Type3 = NIMTLR

//Sequence4 = Standard MTLR
Sequence4 = 1006 1000 2000 1004 1003 1001 2001 1001 2001 1100
SessionId4 = 5
PM4 = 1
Type4 = MTLR
StartPosition4 = 6

//----------------------------------------------

