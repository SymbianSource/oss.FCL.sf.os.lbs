[LBS-MOLR]
psy_uid=0x101fe98c

[PrivHandler]
privhandler_type=1

[UEBasedMOLRSelf]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,1,2,49.2,3.5,50,2,3*


[UEAssistedMOLRCancel]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1
tc_id=9

$update,1,2,49.2,NAN,NAN,NAN,NAN*

[UEAssistedMOLRGpsOk]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,1,2,49.2,NAN,NAN,NAN,NAN*
$update,1,2,49.2,NAN,NAN,NAN,NAN*
$update,2,2,50.2454,0.1668,1.0,10,10*

[MOLRErrorAssistance]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on

$update,1,2,49.2,0.3,1.0,10,10*

[INC103714]
// to test that when the measurement array contains zero elements
// the array gets passed all the way to the protocol module
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,1,0,49.2,NAN,NAN,NAN,NAN*
$update,1,0,49.2,NAN,NAN,NAN,NAN*
$update,2,0,50.2454,0.1668,1.0,10,10*

[LateGps]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,1,2,nan,nan,nan,nan,nan*
$update,1,3,nan,nan,nan,nan,nan*
$update,2,2,50.2454,0.1668,1.0,10,10*

// client request = 50, 1000 metres as per profile
// network request = 100 metres

// gps pos = 100 metres
// network ref pos = 1000 metres
// network final pos = 100 metres


[Stop_InsideMoLr]
tc_id = 5
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
agps_module_req_ass_data_req_opt = off
expected_api_behaviour = 1

$update,1,2,nan,nan,nan,nan,nan*
$update,1,3,nan,nan,nan,nan,nan*
$update,1,2,50.2454,0.1668,1.0,2000,2000*

// client request = 50, 1000 metres as per profile
// network request = 100 metres

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres

[Stop_OutsideMoLr]
tc_id = 6
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
agps_module_req_ass_data_req_opt = off
expected_api_behaviour = 1

$update,1,2,nan,nan,nan,nan,nan*
$update,1,3,nan,nan,nan,nan,nan*
$update,1,2,50.2454,0.1668,1.0,2000,2000*

// client request = 50, 1000 metres as per profile
// network request = 100 metres

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres


[InaccurateGpsTimeout]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,1,2,nan,nan,nan,nan,nan*
$update,1,3,nan,nan,nan,nan,nan*
$update,4,2,50.2454,0.1668,1.0,2000,2000*


[AutonomousFutile]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
expected_api_behaviour = 1

$update,1,0,nan,nan,nan,nan,nan,4*	// 4 = KPositionCalculationFutile


[HybridUEBasedFutile]
tc_id = 1
expected_api_behaviour = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini

// error coded in update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*


[UEAssistedFutile]
tc_id = 2
expected_api_behaviour = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini

// error coded in second update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*

[AccurateReferencePosition]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*
expected_api_behaviour = 1

[UEAssistedFutileTimeout]
tc_id = 3
expected_api_behaviour = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
expected_api_behaviour = 1

// error coded in second update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,3,2,NAN,NAN,NAN,NAN,NAN,4*


[NonHybridUEBasedFutile]
tc_id = 4
expected_api_behaviour = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini

// error coded in update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*


[UEBasedMolrPartial]
expected_api_behaviour = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,2,1.0,nan,nan,nan,nan*
$update,1,2,1.0,2.0,10,1000,1000*
$update,1,2,1.1,2.0,10,1000,1000*
// The module should be set to PTB then hybrid and not set again
// PTB
$modulemodes,1*
// Hybrid (= PTB, Pos, Mes)
$modulemodes,1,1,2*


[UEAssistedMolrPartial]
// on S60 a complete but inaccurate position is returned with KErrNone (rather than 'partial' as on symbian)
expected_ref_error=0
// S60 doesn't support early complete:
early_complete_supported=0
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module produces a partial update and then an inaccurate but complete one
$update,1,2,1.0,nan,nan,nan,nan*
$update,1,2,1.0,2.0,10,1000,1000*
expected_api_behaviour = 1

[UEBasedPartialAfterRef]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
expected_api_behaviour = 1

$update,1,2,1.0,2.0,nan,nan,nan*


[UEBasedPartialBeforeRef]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
expected_api_behaviour = 1

$update,1,2,1.0,2.0,50,10,10*



[ClientTimeout]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1
$update,1,2,nan,nan,nan,nan,nan*
$update,1,3,nan,nan,nan,nan,nan*
$update,10,2,50.2454,nan,nan,nan,nan*

// client request = 50, 100 metres as per profile
// network request = 100 metres

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres




[UEBasedMOLRTimeOut_On_RefBest]
tc_id = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,2,0,nan,nan,nan,nan,nan*
$update,1,0,nan,nan,nan,nan,nan,4*	// 4 = KPositionCalculationFutile

// client request = 50, 1000 metres as per profile
// network request = 50, 1000 metres as per profile

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres


[UEBasedMOLRTimeOut_On_GpsBest]
tc_id = 2
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,2,0,49.2,3.5,50,80,80*

// client request = 50, 1000 metres as per profile
// network request = 50, 1000 metres as per profile

// gps pos = 80 metres
// network ref pos = 1000 metres
// network final pos = 100 metres


[UEBasedMOLRTimeOut_Off_RefBest]
tc_id = 3
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,2,0,49.2,3.5,50,2000,2000*

// client request = 50, 1000 metres as per profile
// network request = 50, 1000 metres as per profile

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres




[HybridUEAssistedMOLRTimeOut_On_RefBest]
tc_id = 1
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,2,2,49.2,NAN,NAN,NAN,NAN*
$update,2,1,nan,nan,nan,nan,nan*
$update,1,0,nan,nan,nan,nan,nan,4*	// 4 = KPositionCalculationFutile

// client request = 50, 1000 metres as per profile
// network request = 50, 1000 metres as per profile

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres


[HybridUEAssistedMOLRTimeOut_On_GpsBest]
tc_id = 2
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,2,2,49.2,NAN,NAN,NAN,NAN*
$update,2,1,49.2,NAN,50,80,80*

// client request = 50, 1000 metres as per profile
// network request = 50, 1000 metres as per profile

// gps pos = 80 metres
// network ref pos = 1000 metres
// network final pos = 100 metres


[HybridUEAssistedMOLRTimeOut_Off_RefBest]
tc_id = 3
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
expected_api_behaviour = 1

$update,2,2,49.2,NAN,NAN,NAN,NAN*
$update,2,1,49.2,NAN,50,2000,2000*

// client request = 50, 1000 metres as per profile
// network request = 50, 1000 metres as per profile

// gps pos = 2000 metres
// network ref pos = 1000 metres
// network final pos = 100 metres

[HybridUEAssistedMOLRNoGpsUpdate]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
agps_module_assistance_data_opt = on
agps_module_update_timeout = 6000000
expected_api_behaviour = 1

$update,2,2,49.2,NAN,NAN,NAN,NAN*


[Comment]
//////////////////////////// TAP TESTS //////////////////////////////
// Key:
// 
// NetworkMethod: 
// 	1 = TB
// 	2 = TB+TA
// 	3 = TA
//	4 = TA+TB
//	5 = Unspecified
//
// PositionOriginator:
// 	1 = module
// 	2 = network
//
// Module Modes:
//	1 entry of this format for eachg time the module mode is reconfigured during test:
// 	$modulemodes,mode,[pos or meas],[pos or meas]*
// 
// 	where mode is one of:
// 	1 = PTB
// 	2 = ATB (not supported)
// 	3 = Autonomous
// 	4 = PTA
// 	5 = ATA
//
// 	[] = optional
// 	1 = pos
// 	2 = meas
//
// 	For example, here we expect The module to be set to PTB and then to hybrid:
// 	$modulemodes,1*
// 	$modulemodes,1,1,2*
//
// Updates:
//	1 entry of this format for each update to be sent by the module:
//	$update,number of updates of this type, ?,lat, long, alt, hor acc, vert acc*
//	
//	For example, here we expect 3 updates where the first 2 are inaccurate (all NANs) and the third is a proper update:
//	$update,2,4,NAN,NAN,NAN,NAN,NAN*
//	$update,1,0,49.2,3.5,50,20,20*
//
//	Note: the module makes the meas data details up itself, don't need them in config
//	Note: the agps hybrid test module always sends a NAN pos/meas soon after the request has been sent, 
//	      independent of above which are sent at max fix time for each request.
//	
//	Note: the TAP test framework will make 2 requests from the NW where measurements are expected (TAP / Hybrid)
//	      and a single request from the network when a position is expected	(PTB / Hybrid)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------
//-------------------------- Admin = PTB ---------------------------
//------------------------------------------------------------------


//----------------------------- TB CAP -----------------------------

[MOLR-TBADMIN-TBCAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBCAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA				
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


// Hybrid test module doesn't support this (dropping into autonomous when no assistance data arrives)
[MOLR-TBADMIN-TBCAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA
NetworkMethod = 3
// It is expected that the module will return the position 
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBCAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA+TB
NetworkMethod = 4
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


//----------------------------- TA CAP -----------------------------

[MOLR-TBADMIN-TACAP]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// The network will request TB (not used, but we need to set something)
NetworkMethod = 1
// It is expected that the module will return the position (not used, but we need to set something)
PositionOriginator = 1
// in variant2 modes are validated in the psy and will not be sent out if they conflict with modcaps
$modulemodes*
expected_api_behaviour = 1



//----------------------------- TB||TA CAP -----------------------------

[MOLR-TBADMIN-TBORTACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1



[MOLR-TBADMIN-TBORTACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1



[MOLR-TBADMIN-TBORTACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// The module should be set to PTB and then in PTA and not set again
// PTB
$modulemodes,1*
// PTA
$modulemodes,4*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBORTACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA+TB
NetworkMethod = 4
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


//----------------------------- TB&&TA CAP -----------------------------

[MOLR-TBADMIN-TBANDTACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will send one (complete) update
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBANDTACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then in hybrid and not set again
// PTB
$modulemodes,1*
// PTB (Pos, Mes)
$modulemodes,1,1,2*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBANDTACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA
NetworkMethod = 3
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then in hybrid and not set again
// PTB
$modulemodes,1*
// PTB (Pos, Mes)
$modulemodes,1,1,2*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBANDTACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA+TB
NetworkMethod = 4
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then in hybrid and not set again
// PTB
$modulemodes,1*
// PTB (Pos, Mes)
$modulemodes,1,1,2*
expected_api_behaviour = 1


[MOLR-TBADMIN-TBANDTACAP-UNSPECIFIEDNET]
$update,1,0,49.2,3.5,50,20,20*
// The network will not specify the gpsmode
NetworkMethod = 5
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*
expected_api_behaviour = 1


//------------------------------------------------------------------
//-------------------------- Admin = ATA ---------------------------
//------------------------------------------------------------------

//----------------------------- TB CAP -----------------------------

[MOLR-ATAADMIN-TBCAP]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// The network will request TB (not used, but we need to set something)
NetworkMethod = 1
// It is expected that the module will return the position (not used, but we need to set something)
PositionOriginator = 1
// in variant2 modes are validated in the psy and will not be sent out if they conflict with modcaps
$modulemodes*
expected_api_behaviour = 1


//----------------------------- TA CAP -----------------------------

[MOLR-ATAADMIN-TACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,2,0,NAN,NAN,NAN,NAN,NAN*	
// The network will request TB (not supported, request rejected)
NetworkMethod = 1
// It is expected that the network will return the position (not used but need to set something)
PositionOriginator = 2
// The module should be set to ATA and then not set again
// ATA
$modulemodes,5*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*	
// The network will request TBTA 
NetworkMethod = 2
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not set again
// ATA
$modulemodes,5*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*	
// The network will request TA 
NetworkMethod = 3
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not set again
// ATA
$modulemodes,5*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*	
// The network will request TATB 
NetworkMethod = 4
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not set again
// ATA
$modulemodes,5*
expected_api_behaviour = 1

//--------------------------- TB||TA CAP ---------------------------

[MOLR-ATAADMIN-TBORTACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// hybrid test module will return one complete position
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB 
NetworkMethod = 1
// It is expected that the module will return the position 
PositionOriginator = 1
// The module should be set to ATA and then to PTB
// ATA
$modulemodes,5*
// PTB
$modulemodes,1*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TBORTACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TBTA 
NetworkMethod = 2
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not again
// ATA
$modulemodes,5*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TBORTACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TA 
NetworkMethod = 3
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not again
// ATA
$modulemodes,5*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TBORTACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TATB
NetworkMethod = 4
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not again
// ATA
$modulemodes,5*
expected_api_behaviour = 1

//--------------------------- TB&&TA CAP ---------------------------

[MOLR-ATAADMIN-TBANDTACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// hybrid test module will return one complete position
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB 
NetworkMethod = 1
// It is expected that the module will return the position 
PositionOriginator = 1
// The module should be set to ATA and then to PTB
// ATA
$modulemodes,5*
// PTB (Pos, Mes)
$modulemodes,1,1,2*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TBANDTACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TBTA 
NetworkMethod = 2
// It is expected that the module will return the position 
PositionOriginator = 1
// The module should be set to ATA and then hybrid
// ATA
$modulemodes,5*
// PTB (Pos, Mes)
$modulemodes,1,1,2*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TBANDTACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TA 
NetworkMethod = 3
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to ATA and then not again
// ATA
$modulemodes,5*
expected_api_behaviour = 1


[MOLR-ATAADMIN-TBANDTACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TATB 
NetworkMethod = 4
// It is expected that the module will return the position 
PositionOriginator = 1
// The module should be set to ATA and then hybrid
// ATA
$modulemodes,5*
// PTB (Pos, Mes)
$modulemodes,1,1,2*
expected_api_behaviour = 1

//------------------------------------------------------------------



[MOLR-RESET-TB-AFTAST]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after assistance data is sent
StepForReset = 3
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1
expected_api_behaviour = 1

[MOLR-RESET-TB-BEFSES]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,1,0,49.2,3.5,50,20,20*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset before session is started
StepForReset = 1
// Warm up module (the module will be warmed up in TB)
WarmUpModule = 1
// The reset mask is 0xFFFFFFFF
ResetMask = -1
expected_api_behaviour = 1


[MOLR-RESET-TA-AFTMES]
agps_module_update_file = c:\testdata\configs\lbs_molr_variant2.ini
$update,3,3,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// Reset after measurements have been received
StepForReset = 4
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1
expected_api_behaviour = 1
