[PrivHandler]
privhandler_type=1


[UEBasedMTLR]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
agps_module_assistance_data_opt = on
agps_module_multi_updates_opt = off
$update,1,2,51.5015,-0.105,50,2,3*


[HybridUEAssistedMTLRNW]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
agps_module_assistance_data_opt = on
agps_module_multi_updates_opt = off
$update,1,2,NAN,NAN,NAN,NAN,NAN*
$update,1,2,51.5023,-0.1084,10,2000,2000*
$update,1,3,51.5021,-0.1077,10,2000,2000*

// Quality profile, lbsprofile.ini - [horiz acc, vert acc] [50, 1000]
// Inaccurate GPS Positions have quality of [2000,2000]


[HybridUEAssistedMTLRGPSOK]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
agps_module_assistance_data_opt = on
agps_module_multi_updates_opt = off
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,1,2,51.5015,-0.105,50,2,3*


[HybridUEAssistedMTLRNoGPS]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
agps_module_assistance_data_opt = on
agps_module_multi_updates_opt = off
$update,2,2,NAN,NAN,NAN,NAN,NAN*


[HybridUEBasedFutile]
tc_id = 1
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini

// error coded in update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*


[UEAssistedFutile]
tc_id = 2
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini

// error coded in second update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*

[AccurateReferencePosition]	
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*

[NonHybridUEBasedFutile]
tc_id = 3
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini

// error coded in update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*

[HybridUEBasedLateFutile]
tc_id = 4
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini

// error coded in second update is KPositionCalculationFutile (4)
$update,1,2,NAN,NAN,NAN,NAN,NAN*			
$update,1,2,NAN,NAN,NAN,NAN,NAN,4*

[Comment]
//////////////////////////// TAP TESTS //////////////////////////////
// Key:
// 
// NetworkMethod: 
// 	1 = TB
// 	2 = TB+TA
// 	3 = TA
//	4 = TA+TB
//	5 = unspecified
//
// PositionOriginator:
// 	1 = module
// 	2 = network
//
// Module Modes:
//	1 entry of this format for eachg time the module mode is reconfigured during test:
// 	$modulemodes,mode,[pos or meas],[pos or meas]*
// 
// 	where mode is one of:
// 	1 = PTB
// 	2 = ATB (not supported)
// 	3 = Autonomous
// 	4 = PTA
// 	5 = ATA
//
// 	[] = optional
// 	1 = pos
// 	2 = meas
//
// 	For example, here we expect The module to be set to PTB and then to hybrid:
// 	$modulemodes,1*
// 	$modulemodes,1,1,2*
//
// Updates:
//	1 entry of this format for each update to be sent by the module:
//	$update,number of updates of this type, ?,lat, long, alt, hor acc, vert acc*
//	
//	For example, here we expect 3 updates where the first 2 are inaccurate (all NANs) and the third is a proper update:
//	$update,2,4,NAN,NAN,NAN,NAN,NAN*
//	$update,1,0,49.2,3.5,50,20,20*
//
//	Note: the module makes the meas data details up itself, don't need them in config
//	Note: the agps hybrid test module always sends a NAN pos/meas soon after the request has been sent, 
//	      independent of above which are sent at max fix time for each request.
//	
//	Note: the TAP test framework will make 2 requests from the NW where measurements are expected (TAP / Hybrid)
//	      and a single request from the network when a position is expected	(PTB / Hybrid)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//----------------------------- TB CAP -----------------------------

[MTLR-TBCAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*


[MTLR-TBCAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA				
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*


// Rejected by NRH
[MTLR-TBCAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA
NetworkMethod = 3
// It is expected that the module will return the position 
PositionOriginator = 1
// The module should not be set


[MTLR-TBCAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA+TB
NetworkMethod = 4
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and then not set again
// PTB
$modulemodes,1*


//----------------------------- TA CAP -----------------------------

// Rejected by NRH
[MTLR-TACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TB (not used, but we need to set something)
NetworkMethod = 1
// It is expected that the network will return the position (not used, but we need to set something)
PositionOriginator = 2
// The module should not be set 


[MTLR-TACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TBTA 
NetworkMethod = 2
// It is expected that the network will return the position 
PositionOriginator = 2
// The module should be set to PTA and then not set again
// PTA
$modulemodes,4*


[MTLR-TACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// The module should be set to PTA and then not set again
// PTA
$modulemodes,4*


[MTLR-TACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TATB
NetworkMethod = 4
// It is expected that the network will return the position
PositionOriginator = 2
// The module should be set to PTA and then not set again
// PTA
$modulemodes,4*


//----------------------------- TB||TA CAP -----------------------------

[MTLR-TBORTACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*



[MTLR-TBORTACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*



[MTLR-TBORTACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
// module will return 2 sets of measurements
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// The module should be set to PTA
// PTA
$modulemodes,4*


[MTLR-TBORTACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA+TB
NetworkMethod = 4
// It is expected that the network will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again - the default mode set in LBSAdmin
// PTB
$modulemodes,1*


//----------------------------- TB&&TA CAP -----------------------------

[MTLR-TBANDTACAP-TBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
// module will send one (complete) update
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*


[MTLR-TBANDTACAP-TBTANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to hybrid
// PTB (Pos, Mes)
$modulemodes,1,1,2*


[MTLR-TBANDTACAP-TANET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// The module should be set to PTA
// PTA
$modulemodes,4*


[MTLR-TBANDTACAP-TATBNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
// module will return 2 sets of measurements, then an accurate position
$update,2,0,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TA+TB
NetworkMethod = 4
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to hybrid
// PTB (Pos, Mes)
$modulemodes,1,1,2*


[MTLR-TBANDTACAP-NOTSPECIFIEDNET]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
// module will send one (complete) update
$update,1,0,49.2,3.5,50,20,20*
// The network will not specify the gps mode
NetworkMethod = 5
// It is expected that the module will return the position
PositionOriginator = 1
// The module should be set to PTB and not set again
// PTB
$modulemodes,1*


[MTLR-RESET-AUTO-BEG]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,0,49.2,3.5,50,20,20*
// The network will request Autonomous
NetworkMethod = 5
// It is expected that the module will return the position
PositionOriginator = 1
// Reset at the beginning of the sesion
StepForReset = 2
// Warm up module (the module will be warmed up in TB)
WarmUpModule = 1
// The reset mask is 0xFFFFFFFF 
ResetMask = -1

[MTLR-RESET-HYBR-AFTMES]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
$update,1,3,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after measurements are received
StepForReset = 4
// Warm up module (the module will be warmed up in TB)
WarmUpModule = 1
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-HYBR-AFTPOS]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,3,NAN,NAN,NAN,NAN,NAN*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB+TA
NetworkMethod = 2
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after position is received
StepForReset = 5
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-TB-AFTAST]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after assistance data is sent
StepForReset = 3
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-TB-AFTAST2]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after assistance data is sent
StepForReset = 3
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0x00000001, so no assistance data set already should be touched
//ResetMask = 1
// Updated ResetMask to 4 as NPE doesnt support EAssistanceDataAquisitionAssistance - 0x00000001
ResetMask = 4

[MTLR-RESET-TB-AFTAST3]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after assistance data is sent
StepForReset = 3
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0x00000008 (EAssistanceDataReferenceTime)
ResetMask = 8

[MTLR-RESET-TB-AFTCLS]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after session close
StepForReset = 6
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-TB-AFTPOS]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset after position is received
StepForReset = 5
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFF7 (everything - 0x000000008(EAssistanceDataReferenceTime))
ResetMask = -9

[MTLR-RESET-TB-BEFSES]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset before session is started
StepForReset = 1
// Warm up module (the module will be warmed up in TB)
WarmUpModule = 1
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-TB-BEG]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,1,0,49.2,3.5,50,20,20*
$update,1,0,49.2,3.5,50,20,20*
// The network will request TB
NetworkMethod = 1
// It is expected that the module will return the position
PositionOriginator = 1
// Reset when session begins
StepForReset = 2
// Warm up module (the module will be warmed up in TB)
WarmUpModule = 1
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-TA-AFTAST]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,3,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// Reset after assistance data is sent
StepForReset = 3
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1

[MTLR-RESET-TA-AFTCLS]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini
$update,2,3,NAN,NAN,NAN,NAN,NAN*
// The network will request TA
NetworkMethod = 3
// It is expected that the network will return the position
PositionOriginator = 2
// Reset after session is closed
StepForReset = 6
// Don't warm up module
WarmUpModule = 0
// The reset mask is 0xFFFFFFFF
ResetMask = -1


// key to ini variables for network induced testing
// ------------------------------------------------
// processprivreq = 0 (off) or 1 (on)
// service = 4 (EServiceMobileTerminated) or 16 (EServiceNetworkInduced)
// emergency = 0 (off) or 1 (on)
// admin = 	1 (EExternalLocateOn) or 2 (EExternalLocateOnButAlwaysVerify) or 3 (EExternalLocateOff) or 4 (EExternalLocateOffButNotify)
// response = 1 (ERequestAccepted) or 2 (ERequestRejected)

[NetworkInduced]
agps_module_update_file = c:\testdata\configs\lbs_mtlr.ini

$update,1,2,51.5015,-0.105,50,2,3*


// Network Induced tests.

[NetworkInduced_EmergencyOn_AdminAny]
processprivreq = 0
emergency = 1
service = 16
admin = 3
response = 1


[NetworkInduced_EmergencyOff_AdminOn]
processprivreq = 0
emergency = 0
service = 16
admin = 1
response = 1

[NetworkInduced_EmergencyOff_AdminOnButAlwaysVerify_Accept]
processprivreq = 0
emergency = 0
service = 16
admin = 2
response = 1

[NetworkInduced_EmergencyOff_AdminOnButAlwaysVerify_Reject]
processprivreq = 0
emergency = 0
service = 16
admin = 2
response = 2

[NetworkInduced_EmergencyOff_AdminOnButAlwaysVerify_Timeout]
processprivreq = 0
emergency = 0
service = 16
admin = 2
response = 0

[NetworkInduced_EmergencyOff_AdminOff]
processprivreq = 0
emergency = 0
service = 16
admin = 3
response = 2

[NetworkInduced_EmergencyOff_AdminOffButNotify]
processprivreq = 0
emergency = 0
service = 16
admin = 4
response = 2


// MTLR without prior privacy request tests

[NoPrivMTLR_EmergencyOn_AdminAny]
processprivreq = 0
emergency = 1
service = 4
admin = 3
response = 1


[NoPrivMTLR_EmergencyOff_AdminOn]
processprivreq = 0
emergency = 0
service = 4
admin = 1
response = 1


// MTLR with privacy request tests

[MTLR_EmergencyOn_AdminAny]
processprivreq = 1
emergency = 1
service = 4
admin = 3
response = 1


[MTLR_EmergencyOff_AdminOn]
processprivreq = 1
emergency = 0
service = 4
admin = 1
response = 1


