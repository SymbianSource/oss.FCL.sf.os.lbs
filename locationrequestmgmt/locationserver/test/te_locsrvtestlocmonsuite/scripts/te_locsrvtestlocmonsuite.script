//
// Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @File
//! @SYMTestSuiteName         te_locsrvtestlocmonsuite.script
//! @SYMScriptTestEnvironment


PRINT Run all te_locsrvtestlocmonsuite Suite Tests

LOAD_SUITE te_locsrvtestlocmonsuite


START_TESTCASE                LBS-locserver-ClearDB-10Clients-0001
//! @SYMTestCaseID              LBS-locserver-ClearDB-10Clients-0001
//! @SYMTestCaseDesc            To ensure a larger number of EmptyLastKnownPositionStore requests [a.k.a. Clear database requests] in parallel are supported.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1. Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open 10 sessions with the EPos Location Server.
//!                             3. Issue 10 EmptyLastKnownPositionStore requests [a.k.a. Clear database request] on the 10
//!                             sessions.
//!                             4. Check if both the above requests are completed without any error.
//!                             5.  Reissue two EmptyLastKnownPositionStore requests on the first two sessions.
//!                             6.  Check if both the above requests are completed without any error.
//! @SYMTestExpectedResults     KErrNone is returned in the for all the asynchronous requests.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDB-10Clients-0001
END_TESTCASE                  LBS-locserver-ClearDB-10Clients-0001



START_TESTCASE                LBS-locserver-ClearDB-2Clients-0001
//! @SYMTestCaseID              LBS-locserver-ClearDB-2Clients-0001
//! @SYMTestCaseDesc            To validate that more than one EmptyLastKnownPositionStore requests [a.k.a. Clear database requests] in parallel are supported.
//! @SYMTestPriority            Critical
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session [session1] with the EPos Location Server.
//!                             3. Open another session [session2] with the EPos Location Server.
//!                             4. Issue a EmptyLastKnownPositionStore request [a.k.a. Clear database request] on session1.
//!                             5. Issue a EmptyLastKnownPositionStore request on session2.
//!                             6. Check if both the above requests are completed without any error.
//! @SYMTestExpectedResults     KErrNone is returned to both the asynchronous requests.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDB-2Clients-0001
END_TESTCASE                  LBS-locserver-ClearDB-2Clients-0001



START_TESTCASE                LBS-locserver-ClearDB-AndCancel-0001
//! @SYMTestCaseID              LBS-locserver-ClearDB-AndCancel-0001
//! @SYMTestCaseDesc            To verify that a client can cancel its outstanding EmptyLastKnownPositionStore requests [a.k.a. Clear database requests] .
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session [session1] with the EPos Location Server.
//!                             3. Issue a EmptyLastKnownPositionStore request [a.k.a. Clear database request] on session1.
//!                             4. Cancel the above request.
//!                             5. Request gets cancelled successfully.
//! @SYMTestExpectedResults     1. EmptyLastKnownPositionStore  request completed with KErrCancel
//!                             2. CancelRequest  completed with KErrNone.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDB-AndCancel-0001
END_TESTCASE                  LBS-locserver-ClearDB-AndCancel-0001



START_TESTCASE                LBS-locserver-ClearDB-AndCancel-2Clients-0001
//! @SYMTestCaseID              LBS-locserver-ClearDB-AndCancel-2Clients-0001
//! @SYMTestCaseDesc            To check if  cancelling an oustanding EmptyLastKnownPositionStore requests [a.k.a. Clear database requests] on a  session does not affect the other requests on different sessions.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session [session1] with the EPos Location Server.
//!                             3. Open another session [session2] with the EPos Location Server.
//!                             4. Issue a EmptyLastKnownPositionStore request [a.k.a. Clear database request] on session1.
//!                             5. Issue a EmptyLastKnownPositionStore request on session2.
//!                             6. Cancel the request on session2.
//!                             7. Check if the request on session1 is completed successfully and the one on session2 gets
//!                             cancelled.
//! @SYMTestExpectedResults     1. Session1 - EmptyLastKnownPositionStore  request completed with KErrNone
//!                             2. Session2 - EmptyLastKnownPositionStore  request completed with KErrCancel
//!                             3. Session2 - CancelRequest  completed with KErrNone.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDB-AndCancel-2Clients-0001
END_TESTCASE                  LBS-locserver-ClearDB-AndCancel-2Clients-0001

//Delay to ensure that the location server is shut down [2sec] before the new test case starts
DELAY 5000
START_TESTCASE                LBS-locserver-ClearDB-LocMonSessionFail-0001
//! @SYMTestCaseID              LBS-locserver-ClearDB-LocMonSessionFail-0001
//! @SYMTestCaseDesc            Negative test case to check if the correct error code is returned for a EmptyLastKnownPositionStore request [a.k.a. Clear database request] when the location server fails to open a session with the location monitor.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session with the EPos Location Server.
//!                             3. Issue a EmptyLastKnownPositionStore request [a.k.a. Clear database request]
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     The error code 'KErrServerTerminated' is returned to the client.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDB-LocMonSessionFail-0001
END_TESTCASE                  LBS-locserver-ClearDB-LocMonSessionFail-0001



START_TESTCASE                LBS-locserver-ClearDBPending-CloseSession-0001
//! @SYMTestCaseID              LBS-locserver-ClearDBPending-CloseSession-0001
//! @SYMTestCaseDesc            Negative test case to check if a panic occurs when the client tries to close the session with an outstanding EmptyLastKnownPositionStore request [a.k.a. Clear database request] .
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session with the EPos location server.
//!                             3. Issue a EmptyLastKnownPositionStore request [a.k.a. Clear database request]
//!                             4. Close the session with the oustanding request.
//!                             5. Check the panic occurs with the correct error code.
//! @SYMTestExpectedResults     The client panics with error code EPositionRequestsNotCancelled [-16].
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDBPending-CloseSession-0001
END_TESTCASE                  LBS-locserver-ClearDBPending-CloseSession-0001



START_TESTCASE                LBS-locserver-ClearDB-TimedOut-0001
//! @SYMTestCaseID              LBS-locserver-ClearDB-TimedOut-0001
//! @SYMTestCaseDesc            To verify if the correct error code is returned to the client when the request with the location monitor times out.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session [session1] with the EPos Location Server.
//!                             3. Issue a EmptyLastKnownPositionStore request [a.k.a. Clear database request] on session1.
//!                             4. Check if the correct error code is returned.
//! @SYMTestExpectedResults     KErrTimedOut is returned to the client.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite ServerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-ClearDB-TimedOut-0001
END_TESTCASE                  LBS-locserver-ClearDB-TimedOut-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-10Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-10Clients-0001
//! @SYMTestCaseDesc            To ensure a larger number of get last known position requests in parallel are supported.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1. Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open 10 sessions and subsessions with the EPos Location Server.
//!                             3. Issue 10 GetLastKnownPosition requests on the 10 subsessions.
//!                             4. Check if both the above requests are completed without any error and the correct position information is returned.
//! @SYMTestExpectedResults     Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical accuracy [0.0]
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-10Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-10Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-AndClearDB-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-AndClearDB-0001
//! @SYMTestCaseDesc            To verify if the oustanding GetLastKnownPosition request gets cancelled if a clear database request is issued.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Check if the GetLastKnownPosition is still oustanding - if not change the test timing delays.
//!                             5. Issue an EmptyLastKnownPositionStore request.
//!                             6. Check if the GetLastKnownPosition gets cancelled and the EmptyLastKnownPositionStore gets completed successfully.
//! @SYMTestExpectedResults     1. KErrCancel returned for the GetLastKnownPositionArea request.
//!                             2. KErrNone returned for the EmptyLastKnownPositionStore request.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-AndClearDB-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-AndClearDB-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-AndClearDB-3Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-AndClearDB-3Clients-0001
//! @SYMTestCaseDesc            To verify if the oustanding GetLastKnownPosition requests on various Subsessions (belonging to different sessions) get cancelled irrespective of the Session issuing the EmptyLastKnownPositionStore request.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session (say Session1) with the EPos Location Server.
//!                             3. Open two subsessions (say SubsessionA  SubsessionB) on Session1.
//!                             4. Open another session (say Session2) with the EPos Location Server.
//!                             5. Open another subsession (SubsessionC) on Session2.
//!                             6.  Issue GetLastKnownPosition requests on 'ALL' the above subsession.
//!                             7. Check if all the GetLastKnownPosition requests are still oustanding - if not change the test timing delays.
//!                             8.  Issue an EmptyLastKnownPositionStore request on Sesssion2.
//!                             9. Check if all the GetLastKnownPosition requests on both the sessions get cancelled and the EmptyLastKnownPositionStore on Session2 gets
//!                             completed successfully.
//! @SYMTestExpectedResults     1. KErrCancel is returned for GetLastKnownPosition requests on SubsessionA, SubsessionB and SubsessionC.
//!                             2. KErrNone is returned for EmptyLastKnownPositionStore request on Session2.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-AndClearDB-3Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-AndClearDB-3Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-AndLKPArea-3Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-AndLKPArea-3Clients-0001
//! @SYMTestCaseDesc            To verify if both GetLastKnownPosition and GetLastKnownPositionArea requests are supported in parallel.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session (say Session1) with the EPos Location Server.
//!                             3. Open two subsessions (say SubsessionA  SubsessionB) on Session1.
//!                             4. Open another session (say Session2) with the EPos Location Server.
//!                             5. Open another subsession (SubsessionC) on Session2.
//!                             6. Issue GetLastKnownPosition request on SubsessionA and SubsessionB.
//!                             7. Issue a GetLastKnownPositionArea request on SubsessionC.
//!                             8. Check if the last known position with area information is returned to SubsessionC and last known position with area information is returned to the other
//!                             two subsessions.
//! @SYMTestExpectedResults     SubsessionA and SubsessionB
//!                             Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical
//!                             accuracy [0.0]
//!                             SubsessionC
//!                             Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical
//!                             accuracy [0.0]   AreaInfo [EAreaCity]
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-AndLKPArea-3Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-AndLKPArea-3Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-0001
//! @SYMTestCaseDesc            To check if the get last known position area request returns a position and area information to the client.
//! @SYMTestPriority            Critical
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Check if the dummy values for position and area information set in the test location monitor api are returned to the client.
//! @SYMTestExpectedResults     Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical accuracy [0.0]  AreaInfo [EAreaCity]
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-10Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-10Clients-0001
//! @SYMTestCaseDesc            To ensure a larger number of get last known position area requests in parallel are supported.
//! @SYMTestPriority            High
//! @SYMTestActions             1. Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open 10 sessions and subsessions with the EPos Location Server.
//!                             3. Issue 10 GetLastKnownPositionArea requests on the 10 subsessions.
//!                             4. Check if both the above requests are completed without any error and the correct position and area information are returned.
//! @SYMTestExpectedResults     Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical accuracy [0.0]  AreaInfo [EAreaCity]
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-10Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-10Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-AndClearDB-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-AndClearDB-0001
//! @SYMTestCaseDesc            To verify if the oustanding GetLastKnownPositionArea request gets cancelled if a clear database request is issued.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Check if the GetLastKnownPositionArea is still oustanding - if not change the test timing delays.
//!                             5. Issue an EmptyLastKnownPositionStore request.
//!                             6. Check if the GetLastKnownPositionArea gets cancelled and the EmptyLastKnownPositionStore gets completed successfully.
//! @SYMTestExpectedResults     1. KErrCancel returned for the GetLastKnownPositionArea request.
//!                             2. KErrNone returned for the EmptyLastKnownPositionStore request.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-AndClearDB-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-AndClearDB-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-AndClearDB-3Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-AndClearDB-3Clients-0001
//! @SYMTestCaseDesc            To verify if the oustanding GetLastKnownPositionArea requests on various Subsessions (belonging to different sessions) get cancelled irrespective of the Session issuing the EmptyLastKnownPositionStore request.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session (say Session1) with the EPos Location Server.
//!                             3. Open two subsessions (say SubsessionA  SubsessionB) on Session1.
//!                             4. Open another session (say Session2) with the EPos Location Server.
//!                             5. Open another subsession (SubsessionC) on Session2.
//!                             6.  Issue GetLastKnownPositionArea requests on 'ALL' the above subsession.
//!                             7. Check if all the GetLastKnownPositionArea requests are still oustanding - if not change the test timing delays.
//!                             8.  Issue an EmptyLastKnownPositionStore request on Sesssion2.
//!                             9. Check if all the GetLastKnownPositionArea requests on both the sessions get cancelled and the EmptyLastKnownPositionStore on Session2 gets
//!                             completed successfully.
//! @SYMTestExpectedResults     1. KErrCancel is returned for GetLastKnownPositionArea requests on SubsessionA, SubsessionB and SubsessionC.
//!                             2. KErrNone is returned for EmptyLastKnownPositionStore request on Session2.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-AndClearDB-3Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-AndClearDB-3Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-Cancel-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-Cancel-0001
//! @SYMTestCaseDesc            To verify if a client is able to cancel its outstanding GetLastKnownPositionArea request.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Check if the GetLastKnownPositionArea is still oustanding - if not change the test timing delays.
//!                             5. Issue a Cancel request.
//!                             6. Check if the GetLastKnownPositionArea gets cancelled successfully.
//! @SYMTestExpectedResults     1. KErrCancel returned for GetLastKnownPositionArea request.
//!                             2. KErrNone retunred for the CancelRequest.
//! @SYMTestType                UT
//! @SYMCreationDate            13/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-Cancel-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-Cancel-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-Cancel-3Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-Cancel-3Clients-0001
//! @SYMTestCaseDesc            To check if a client cancelling its GetLastKnownPositionArea request does not cancel the requests on other subsessions.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session (say Session1) with the EPos Location Server.
//!                             3. Open two subsessions (say SubsessionA  SubsessionB) on Session1.
//!                             4. Open another session (say Session2) with the EPos Location Server.
//!                             5. Open another subsession (SubsessionC) on Session2.
//!                             6.  Issue GetLastKnownPositionArea requests on 'ALL' the above subsession.
//!                             7. Check if all the GetLastKnownPositionArea requests are still oustanding - if not change the test timing delays.
//!                             8.  Issue an Cancel request on SubsessionA .
//!                             9. Check if only the GetLastKnownPositionArea request on the subsession that issued a cancel gets cancelled without affecting other clients.
//! @SYMTestExpectedResults     1. SubsessionA
//!                             KErrCancel returned for GetLastKnownPositionArea request.
//!                             KErrNone retunred for the CancelRequest.
//!                             2. SubsessionB
//!                             KErrNone returned for GetLastKnownPositionArea request.
//!                             3. SubsessionC
//!                             KErrNone returned for GetLastKnownPositionArea request.
//! @SYMTestType                UT
//! @SYMCreationDate            13/4/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-Cancel-3Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-Cancel-3Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionAreaExtended-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionAreaExtended-0001
//! @SYMTestCaseDesc            To verify if a client can obtain extended area information through the GetLastKnownPositionArea request.
//! @SYMTestPriority            Critical
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request with TPositionAreaExtendedInfo instead of TPositionAreaInfo on the subsession.
//!                             4. Check if the dummy values for position and 'extended' area information set in the test location monitor api are returned to the client.
//! @SYMTestExpectedResults     Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical accuracy [0.0]  ExtendedAreaInfo [MCC, MNC, LAC  CID = 1, all match]
//! @SYMTestType                UT
//! @SYMCreationDate            13/4/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionAreaExtended-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionAreaExtended-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionAreaExtended-IncorrectArg-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionAreaExtended-IncorrectArg-0001
//! @SYMTestCaseDesc            Negative test case to verify that incorrect arguments from the client are detected before forwarding the request to the location monitor.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request with incorrect argument (TPositionCourseInfo instead of TPositionInfo).
//!                             4. Check if the correct error code is returned to the client.
//! @SYMTestExpectedResults     KErrArgument returned to the client.
//! @SYMTestType                UT
//! @SYMCreationDate            13/4/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionAreaExtended-IncorrectArg-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionAreaExtended-IncorrectArg-0001


//Delay to ensure that the location server is shut down [2sec] before the new test case starts
DELAY 5000
START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-LocMonSubSessionFail-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-LocMonSubSessionFail-0001
//! @SYMTestCaseDesc            Negative test case to check if the correct error code is returned for a  GetLastKnownPositionArea  request when the location server fails to open a subsession with the location monitor.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     KErrCouldNotConnect returned for the GetLastKnownPositionArea request.
//! @SYMTestType                UT
//! @SYMCreationDate            13/4/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-LocMonSubSessionFail-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-LocMonSubSessionFail-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-NotFound-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-NotFound-0001
//! @SYMTestCaseDesc            To check if the correct error code is returned to the client if the last known position is not found in the database.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     KErrNotFound is returned as no position was found in the database.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-NotFound-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-NotFound-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionAreaPending-CloseSubSession-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionAreaPending-CloseSubSession-0001
//! @SYMTestCaseDesc            Negative test case to check if a panic occurs when the client tries to close the session with an outstanding GetLastKnownPositionArea request.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Close the subsession with the oustanding request.
//!                             5. Check the panic occurs with the correct error code.
//! @SYMTestExpectedResults     The client panics with error code EPositionRequestsNotCancelled [-16].
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionAreaPending-CloseSubSession-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionAreaPending-CloseSubSession-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionArea-TimedOut-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionArea-TimedOut-0001
//! @SYMTestCaseDesc            To verify if the correct error code is returned to the client when the request with the location monitor times out.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPositionArea request on the subsession.
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     KErrTimedOut is returned to the client.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionArea-TimedOut-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionArea-TimedOut-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-Cancel-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-Cancel-0001
//! @SYMTestCaseDesc            To verify if a client is able to cancel its outstanding GetLastKnownPosition request.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Check if the GetLastKnownPosition is still oustanding - if not change the test timing delays.
//!                             5. Issue a Cancel request.
//!                             6. Check if the GetLastKnownPosition gets cancelled successfully.
//! @SYMTestExpectedResults     1. KErrCancel returned for GetLastKnownPosition request.
//!                             2. KErrNone retunred for the CancelRequest.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-Cancel-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-Cancel-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-Cancel-3Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-Cancel-3Clients-0001
//! @SYMTestCaseDesc            To check if a client cancelling its GetLastKnownPosition request does not cancel the requests on other subsessions.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session (say Session1) with the EPos Location Server.
//!                             3. Open two subsessions (say SubsessionA  SubsessionB) on Session1.
//!                             4. Open another session (say Session2) with the EPos Location Server.
//!                             5. Open another subsession (SubsessionC) on Session2.
//!                             6.  Issue GetLastKnownPosition requests on 'ALL' the above subsession.
//!                             7. Check if all the GetLastKnownPosition requests are still oustanding - if not change the test timing delays.
//!                             8.  Issue an Cancel request on SubsessionA .
//!                             9. Check if only the GetLastKnownPosition request on the subsession that issued a cancel gets cancelled without affecting other clients.
//! @SYMTestExpectedResults     1. SubsessionA
//!                             KErrCancel returned for GetLastKnownPosition request.
//!                             KErrNone retunred for the CancelRequest.
//!                             2. SubsessionB
//!                             KErrNone returned for GetLastKnownPosition request.
//!                             3. SubsessionC
//!                             KErrNone returned for GetLastKnownPosition request.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-Cancel-3Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-Cancel-3Clients-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-IncorrectArg-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-IncorrectArg-0001
//! @SYMTestCaseDesc            Negative test case to verify that incorrect arguments from the client are detected before forwarding the request to the location monitor.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request with incorrect argument (TPositionCourseInfo instead of TPositionInfo).
//!                             4. Check if the correct error code is returned to the client.
//! @SYMTestExpectedResults     KErrArgument returned to the client.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-IncorrectArg-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-IncorrectArg-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-Latest-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-Latest-0001
//! @SYMTestCaseDesc            To check if the get last known position request returns a position to the client.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Check if the dummy values for position information set in the test location monitor api are returned to the client.
//! @SYMTestExpectedResults     Values from lastknowndummyvalues.h returned to the client : Latitude [57.1], Longitude [11.3], Altitude [32.5], Horizontal Accuracy [40.0], Vertical accuracy [0.0]
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-Latest-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-Latest-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-LKPArea-AndClearDB-3Clients-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-LKPArea-AndClearDB-3Clients-0001
//! @SYMTestCaseDesc            To check if GetLastKnownPosition, GetLastKnownPositionArea  and EmptyLastKnownPositionStore are supported in parallel. To also verify if all the outstanding GetLastKnownPosition and GetLastKnownPositionArea  requests get cancelled when an EmptyLastKnownPositionStore is issued.
//! @SYMTestPriority            High
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session (say Session1) with the EPos Location Server.
//!                             3. Open two subsessions (say SubsessionA  SubsessionB) on Session1.
//!                             4. Open another session (say Session2) with the EPos Location Server.
//!                             5. Open another subsession (SubsessionC) on Session2.
//!                             6. Issue GetLastKnownPosition request on SubsessionA and SubsessionB.
//!                             7. Issue a GetLastKnownPositionArea request on SubsessionC.
//!                             8. Issue an EmptyLastKnownPositionStore request [a.k.a. Clear database request] on Session2.
//!                             9. Check if all the GetLastKnownPosition and GetLastKnownPositionArea get cancelled and the EmptyLastKnownPositionStore is
//!                             cancelled successfully.
//! @SYMTestExpectedResults     1. KErrCancel is returned for GetLastKnownPosition / GetLastKnownPositionArea  requests on Subsessions A, B and C.
//!                             2. KErrNone is returned for EmptyLastKnownPositionStore request on Session2.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-LKPArea-AndClearDB-3Clients-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-LKPArea-AndClearDB-3Clients-0001


//Delay to ensure that the location server is shut down [2sec] before the new test case starts
DELAY 5000
START_TESTCASE                LBS-locserver-GetLastKnownPosition-LocMonSubSessionFail-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-LocMonSubSessionFail-0001
//! @SYMTestCaseDesc            Negative test case to check if the correct error code is returned for a  GetLastKnownPosition request when the location server fails to open a subsession with the location monitor.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     KErrCouldNotConnect returned for the GetLastKnownPositionArea request.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-LocMonSubSessionFail-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-LocMonSubSessionFail-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-NotFound-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-NotFound-0001
//! @SYMTestCaseDesc            To check if the correct error code is returned to the client if the last known position is not found in the database.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     KErrNotFound is returned as no position was found in the database.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-NotFound-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-NotFound-0001



START_TESTCASE                LBS-locserver-GetLastKnownPositionPending-CloseSubSession-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPositionPending-CloseSubSession-0001
//! @SYMTestCaseDesc            Negative test case to check if a panic occurs when the client tries to close the session with an outstanding GetLastKnownPosition request.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Close the subsession with the oustanding request.
//!                             5. Check the panic occurs with the correct error code.
//! @SYMTestExpectedResults     The client panics with error code EPositionRequestsNotCancelled [-16].
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPositionPending-CloseSubSession-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPositionPending-CloseSubSession-0001



START_TESTCASE                LBS-locserver-GetLastKnownPosition-TimedOut-0001
//! @SYMTestCaseID              LBS-locserver-GetLastKnownPosition-TimedOut-0001
//! @SYMTestCaseDesc            To verify if the correct error code is returned to the client when the request with the location monitor times out.
//! @SYMTestPriority            Medium
//! @SYMTestActions             1.  Publish the test case id so that the test location monitor api can identify the test case.
//!                             2. Open a session and subsession with the EPos Location Server.
//!                             3. Issue a GetLastKnownPosition request on the subsession.
//!                             4. Check if the correct error code has been returned.
//! @SYMTestExpectedResults     KErrTimedOut is returned to the client.
//! @SYMTestType                UT
//! @SYMCreationDate            20/3/2009
//! @SYMAuthor                  arunkumarpandian
//! @SYMTestStatus              3. Released
RUN_TEST_STEP 100 te_locsrvtestlocmonsuite PositionerTestStep c:\testdata\configs\te_locsrvtestlocmonsuite.ini LBS-locserver-GetLastKnownPosition-TimedOut-0001
END_TESTCASE                  LBS-locserver-GetLastKnownPosition-TimedOut-0001


PRINT te_locsrvtestlocmon_Tests Completed
