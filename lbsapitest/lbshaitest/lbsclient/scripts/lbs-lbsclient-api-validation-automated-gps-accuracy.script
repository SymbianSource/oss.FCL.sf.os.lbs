//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName lbs-lbsclient-api-validation-automated-gps-accuracy
//! @SYMScriptTestEnvironment This test script requires a basic ROM.
// 
// Tests all public elements of the RPositioner, RPositionServer
// classes as a means of confidence that the APIs work as expected.
// 
// The purpose is to provide a regression test suite of PublishedAll
// APIs for: RPositioner, RPositionServer
// The tests are fully automated.
//



LOAD_SUITE t_lbsclient




//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0001
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0001

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0001
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 10 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError   = 10.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError   = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinates, accuracy 10 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0001-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0001-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0001-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0001-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0001-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0001



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0002
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0002

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0002
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinate accuracy
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError   = Any; PositionAccuracy  = 50.0; Altitude = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinate accuracy
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0002-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0002-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0002-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0002-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0002-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0002



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0003
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0003

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0003
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 5 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 5.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS altitude, accuracy 5 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0003-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0003-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0003-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0003-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0003-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0003



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0004
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0004

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0004
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude accuracy
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = 50.0; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations    = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS altitude accuracy
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0004-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0004-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0004-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0004-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0004-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0004



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0005
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0005

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0005
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 30 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 30.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinates, accuracy 30 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0005-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0005-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0005-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0005-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0005-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0005



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0006
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0006

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0006
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 50 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 50.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinates, accuracy 50 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0006-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0006-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0006-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0006-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0006-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0006



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0007
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0007

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0007
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 100 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 100; PositionAccuracy  = Any; Altitude = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinates, accuracy 100 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0007-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0007-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0007-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0007-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0007-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0007



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0008
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0008

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0008
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 10 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 10.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS altitude, accuracy 10 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0008-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0008-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0008-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0008-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0008-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0008



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0009
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0009

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0009
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 30 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 30.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations    = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS altitude, accuracy 30 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0009-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0009-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0009-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0009-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0009-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0009



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0010
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0010

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0010
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 1000 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError   = 1000.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinates, accuracy 1000 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0010-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0010-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0010-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0010-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0010-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0010



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0011
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0011

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0011
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 10000 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 10000.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS coordinates, accuracy 10000 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0011-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0011-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0011-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0011-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0011-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0011



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0012
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0012

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0012
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 100 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude    = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 100.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Verify GPS altitude, accuracy 100 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0012-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0012-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0012-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0012-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0012-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0012



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0013
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0013

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0013
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 500 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude  = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 500.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError   = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get thealtitude with an accurracy of 500 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0013-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0013-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0013-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0013-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0013-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0013



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0014
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0014

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0014
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 10000 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude    = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 10000.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get thealtitude with an accurracy of 10000 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0014-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0014-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0014-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0014-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0014-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0014



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0015
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0015

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0015
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS altitude, accuracy 50 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError   = Any; PositionAccuracy  = Any; Altitude    = {ActualPositionVars,ALTITUDE}; MaximumAltitudeError = 50.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get thealtitude with an accurracy of 50 meters
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0015-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0015-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0015-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0015-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0015-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0015



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0016
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0016

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0016
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 1 meter
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 1.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations    = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS coordinates with an acurracy of 5 meter
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0016-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0016-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0016-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0016-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0016-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0016



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0017
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0017

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0017
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS coordinates, accuracy 5 meters
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 5.0; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS coordinates with an acurracy of 1 meter
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0017-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0017-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0017-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0017-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0017-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0017



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0018
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0018

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0018
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS speed is a positive value
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError  = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError   = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS speed with a positive value.
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0018-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0018-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0018-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0018-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0018-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0018



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0019
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0019

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0019
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		 Verify GPS speed is a zero value
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError   = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = 0.0; MaxSpeedError = 2.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                7. Close positioner session
//!                8. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS speed with a zero value.
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps-accuracy.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-Accuracy-0019-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-Accuracy-0019-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-Accuracy-0019-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-Accuracy-0019-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-Accuracy-0019-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-ACCURACY-0019


DELAY 10000

