//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName lbs-lbsclient-api-validation-automated-agps
//! @SYMScriptTestEnvironment This test script requires a basic ROM.
// 
// Tests all public elements of the RPositioner, RPositionServer
// classes as a means of confidence that the APIs work as expected.
// 
// The purpose is to provide a regression test suite of PublishedAll
// APIs for: RPositioner, RPositionServer
// The tests are fully automated.
//



LOAD_SUITE t_lbsclient




//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0001
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0001

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0001
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position with A-GPS in 10 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations    = 2)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position (10 s)
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0001-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0001-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0001-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0001-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0001-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0001



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0002
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0002

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0002
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position with A-GPS in 20 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 2)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position (20 s)
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0002-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0002-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0002-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0002-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0002-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0002



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0003
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0003

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0003
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position with A-GPS in 40 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 4)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position (40 s)
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0003-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0003-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0003-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0003-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0003-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0003



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0004
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0004

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0004
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position with A-GPS in 60 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 6)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position (60 s)
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0004-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0004-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0004-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0004-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0004-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0004



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0005
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0005

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0005
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position with A-GPS in 120 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 12)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position (120 s)
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0005-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0005-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0005-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0005-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0005-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0005



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0006
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0006

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0006
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position with A-GPS in 240 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 24)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position (240 s)
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0006-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0006-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0006-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0006-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0006-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0006



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0007
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0007

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0007
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position with A-GPS in 600 s, pos acc 500 m, altitude acc 100 m
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. Open positioner (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 50.0; PositionAccuracy = Any; Altitude = {ActualPositionVars,ALTITUDE}MaximumAltitudeError = 100.0; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 54)
//!                7. Close positioner
//!                8. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the A-GPS position in 600 s, with a position accurracy of 500 m and an altitude of 100 m.
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0007-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Agps-0007-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Agps-0007-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Agps-0007-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Agps-0007-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0007



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0008
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0008

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0008
//!@SYMAPI
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!                RPositionSever::GetModuleStatus(TPositionModuleStatusBase {ref}, TPositionModuleId)
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get A-GPS position module status
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                3. GetPositionModuleStatus (DeviceStatus = Any; DataQualityStatus = Any; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                4. GetPositionModuleStatus (DeviceStatus = {SetDeviceStatusVars,EDeviceInactive}; DataQualityStatus  = {SetDataQualityStatusVars,EDataQualityUnknown}; ModuleId = {ModuleIdVars,MODULEID_AGPS})
//!                5. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get the position module ID status.
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-agps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Agps-0008-0001-SetPositionerModuleId_command02
		COMMAND		posser		GetModuleStatus			LBS-LBSCLIENT-Agps-0008-0001-GetModuleStatus_command03
		COMMAND		posser		GetModuleStatus			LBS-LBSCLIENT-Agps-0008-0001-GetModuleStatus_command04
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-AGPS-0008

DELAY 10000

