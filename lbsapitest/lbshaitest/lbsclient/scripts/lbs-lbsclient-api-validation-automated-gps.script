//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName lbs-lbsclient-api-validation-automated-gps
//! @SYMScriptTestEnvironment This test script requires a basic ROM.
// 
// Tests all public elements of the RPositioner, RPositionServer
// classes as a means of confidence that the APIs work as expected.
// 
// The purpose is to provide a regression test suite of PublishedAll
// APIs for: RPositioner, RPositionServer
// The tests are fully automated.
//



LOAD_SUITE t_lbsclient




//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0001
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0001

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0001
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position withGPS, mobile terminated, requestor URL
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatUrl; RequestorData = {ResquestorDataVars, RequestorDataURL})
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get position with GPS
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0001-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0001-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0001-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0001-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0001-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0001




//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0002
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0002

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0002
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position withGPS, mobile originated
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId ={ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval   = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout   = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser;Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError  = Any; AltitudeAccuracyLimit  = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get position with GPS
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0002-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0002-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0002-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0002-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0002-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0002

//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0003
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0003

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0003
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position withGPS in 10 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1 ; Iterations = 1)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get position with GPS, in 10 seconds
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0003-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0003-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0003-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0003-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0003-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0003



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0004
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0004

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0004
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get route withGPS, 4 seconds interval for 120 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = 3000000; UpdateTimeout = 4000000; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 28; Iterations = 30)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get route with GPS, 4 seconds interval for 120 seconds
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0004-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0004-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0004-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0004-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0004-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0004



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0005
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0005

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0005
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position withGPS, mobile terminated, requestor mail
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatMail; RequestorData = {ResquestorDataVars, RequestorDataMail})
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude  = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get position with GPS, mobile terminated, requestor mail
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0005-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0005-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0005-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0005-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0005-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0005



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0006
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0006

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0006
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position withGPS, mobile terminated, requestor telephone
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatTelephone; RequestorData = {ResquestorDataVars, RequestorDataTelephone})
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude  = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get position with GPS, mobile terminated, requestor telephone
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0006-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0006-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0006-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0006-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0006-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0006



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0007
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0007

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0007
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position withGPS in 60 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude  = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 6)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get first position with GPS in 60 seconds
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0007-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0007-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0007-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0007-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0007-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0007



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0008
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0008

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0008
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position withGPS in 120 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser, ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude  = Any; Longitude = Any; MaximumError  = Any; PositionAccuracy  = Any; Altitude  = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 12)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get first position with GPS in 120 seconds
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0008-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0008-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0008-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0008-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0008-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0008



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0009
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0009

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0009
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get route withGPS, 600 seconds interval max for 1200 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = 600000000; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE;ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 2; Iterations = 2)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get route
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0009-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0009-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0009-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0009-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0009-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0009



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0010
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0010

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0010
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get route withGPS, 10 seconds interval for 120 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError   = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = Any; MaxSpeedError  = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 11; Iterations = 12)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get route
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0010-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0010-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0010-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0010-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0010-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0010



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0011
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0011

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0011
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get route withGPS, 60 seconds interval max for 240 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = 60000000; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed  = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 4; Iterations = 4)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get route
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0011-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0011-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0011-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0011-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0011-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0011



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0012
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0012

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0012
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position withGPS in 240 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 24)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0012-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0012-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0012-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0012-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0012-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0012



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0013
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0013

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0013
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position withGPS in 20 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 2)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0013-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0013-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0013-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0013-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0013-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0013



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0014
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0014

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0014
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get first position withGPS in 40 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude  = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 4)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0014-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0014-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0014-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0014-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0014-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0014



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0015
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0015

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0015
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position withGPS, PartialUpdate Not Allowed
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout   = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit  = Any; Speed  = Any; MaxSpeedError  = 0.0; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; StorePositionData   = FALSE; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations     = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0015-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0015-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0015-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0015-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0015-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0015



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0016
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0016

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0016
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get Position, Position Data Age Below 0.1 s
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_NONE})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval   = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout   = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 100000; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy   = Any; Altitude  = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit  = Any; Speed  = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Implemented
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0016-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0016-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0016-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0016-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0016-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0016



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0017
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0017

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0017
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get Position, Position Data Age Below 1.0 s
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_NONE})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 1000000; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit  = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData  = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0017-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0017-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0017-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0017-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0017-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0017



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0018
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0018

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0018
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get Position, Position Data Age Below 2.5 s
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_NONE})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 2500000; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude  = Any; Longitude = Any; MaximumError = Any; PositionAccuracy = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit  = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0018-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0018-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0018-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0018-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0018-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0018



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0019
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0019

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0019
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get Position Without Positioner ID
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_NONE})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = Any; Longitude = Any; MaximumError = Any; PositionAccuracy  = Any; Altitude = Any; MaximumAltitudeError = Any; AltitudeAccuracyLimit  = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = {TimesAndIntervals, DEFAULT_POSITION_QUERY_MINIMUM_SUCCESSFUL}; Iterations = {TimesAndIntervals,DEFAULT_POSITION_QUERY_RETRIES})
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0019-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0019-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0019-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0019-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0019-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0019



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0020
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0020

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0020
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get position withGPS in 600 s, pos acc 500 m, altitude acc 100 m
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge  = 0; AcceptPartialUpdates = FALSE)
//!                6. Get position (PositionServerInstance = posser; Latitude = {ActualPositionVars,LATITUDE}; Longitude = {ActualPositionVars,LONGITUDE}; MaximumError = 500.0; PositionAccuracy = Any; Altitude = {ActualPositionVars, ALTITUDE}; MaximumAltitudeError  = 100.0; AltitudeAccuracyLimit  = Any; Speed = Any; MaxSpeedError = 0.0; StorePositionData = FALSE; ExpectedDataQualityStatus = {SetDataQualityStatusVars,EDataQualityNormal}; MinimumSuccessfullPositionQueryCount = 1; Iterations = 54)
//!                8. Close positioner session
//!                9. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get GPS Position
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0020-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0020-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0020-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0020-0001-SetUpdateOptions_command05
		COMMAND		pos		GetPosition			LBS-LBSCLIENT-Gps-0020-0001-GetPosition_command06
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0020



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0021
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0021

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0021
//!@SYMAPI
//!                RPositionSever::Connect()
//!                RPositionSever::GetModuleStatus(TPositionModuleStatusBase {ref}, TPositionModuleId)
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		GetGPS position module status
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                3. Get module status (DeviceStatus  = {SetDeviceStatusVars, EDeviceInactive}; DataQualityStatus = {SetDataQualityStatusVars,EDataQualityUnknown}; ModuleId = {ModuleIdVars,MODULEID_GPS})
//!                4. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get Position module status
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0021-0001-SetPositionerModuleId_command02
		COMMAND		posser		GetModuleStatus			LBS-LBSCLIENT-Gps-0021-0001-GetModuleStatus_command03
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0021



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0022
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0022

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0022
//!@SYMAPI
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		RPositionServer connect
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_DEFAULT})
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Set a conection with the position server
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0022-0001-SetPositionerModuleId_command02
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0022



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0023
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0023

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0023
//!@SYMAPI
//!                RPositionSever::Connect()
//!                RPositionSever::GetModuleStatus(TPositionModuleStatusBase {ref}, TPositionModuleId)
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Get default positioning module status
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module Id (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_DEFAULT})
//!                3. Get positioner module status (DeviceStatus  = Any; DataQualityStatus = Any; ModuleId = {ModuleIdVars,MODULEID_DEFAULT})
//!                4. Get positioner module status (DeviceStatus  = {SetDeviceStatusVars,EDeviceInactive}; DataQualityStatus = {SetDataQualityStatusVars,EDataQualityUnknown}; ModuleId = {ModuleIdVars,MODULEID_DEFAULT})
//!                5. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Get default positioning module status
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0023-0001-SetPositionerModuleId_command02
		COMMAND		posser		GetModuleStatus			LBS-LBSCLIENT-Gps-0023-0001-GetModuleStatus_command03
		COMMAND		posser		GetModuleStatus			LBS-LBSCLIENT-Gps-0023-0001-GetModuleStatus_command04
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0023



//! Delay required by testcase LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0024
DELAY  5000 

START_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0024

//!@SYMTestCaseID		LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0024
//!@SYMAPI
//!                RPositioner::Open(RPositionServer {ref}, TPositionModuleId)
//!                RPositioner::SetRequestor(CRequestor::TRequestorType, CRequestor::TRequestorFormat, const TDesC {ref})
//!                RPositioner::SetUpdateOptions(const TPositionUpdateOptionsBase {ref})
//!                RPositioner::NotifyPositionUpdate(TPositionInfoBase {ref}, TRequestStatus {ref})
//!                RPositioner::Close()
//!                RPositionSever::Connect()
//!                RPositionSever::Close()
//!@SYMAuthor			jguillermo
//!@SYMCreationDate		6/16/2008 
//!@SYMTestCaseDesc		Set Max Age to 1 seconds
//!@SYMTestActions
//!                1. Connect to position server
//!                2. Set positioner module ID (PositionServerInstance = posser; ModuleId = {ModuleIdVars,MODULEID_DEFAULT})
//!                3. Open positioner session (PositionServerInstance = posser)
//!                4. Set requestor (RequestorType = ERequestorService; RequestorFormat = EFormatApplication; RequestorData = Location-GPS)
//!                5. Set update options (UpdateInterval = {TimesAndIntervals,DEFAULT_UPDATE_INTERVAL}; UpdateTimeout  = {TimesAndIntervals,DEFAULT_UPDATE_TIMEOUT}; MaxAge = 0; AcceptPartialUpdates = FALSE)
//!                6. Close positioner
//!                7. Close position server
//!@SYMTestStatus		Verified
//!@SYMTestPriority		High
//!@SYMTestExpectedResults
//!                Set Max Age to 1 seconds
//!@SYMTestType			CIT

	START_TEST_BLOCK	300	t_lbsclient	\lbs\lbsclient\lbs-lbsclient-api-validation-automated-gps.ini
		CREATE_OBJECT	RPositionServer		posser
		CREATE_OBJECT	RPositioner		pos
		COMMAND		posser		Connect
		COMMAND		pos		SetPositionerModuleId			LBS-LBSCLIENT-Gps-0024-0001-SetPositionerModuleId_command02
		COMMAND		pos		Open			LBS-LBSCLIENT-Gps-0024-0001-Open_command03
		COMMAND		pos		SetRequestor			LBS-LBSCLIENT-Gps-0024-0001-SetRequestor_command04
		COMMAND		pos		SetUpdateOptions			LBS-LBSCLIENT-Gps-0024-0001-SetUpdateOptions_command05
		COMMAND		pos		Close
		COMMAND		posser		Close
	END_TEST_BLOCK
END_TESTCASE LBS-LBSCLIENT-API-VALIDATION-AUTOMATED-GPS-0024

DELAY 10000

